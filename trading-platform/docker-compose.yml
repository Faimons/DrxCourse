# Trading Platform - Complete Development Environment
# Docker Compose Configuration

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # REDIS SERVICE  
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: trading-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_platform
      DB_USER: postgres
      DB_PASSWORD: postgres
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: redis123
      
      # JWT Secrets
      JWT_ACCESS_SECRET: development-access-secret-key-change-in-production
      JWT_REFRESH_SECRET: development-refresh-secret-key-change-in-production
      
      # Application URLs
      FRONTEND_URL: http://localhost:5173
      BACKEND_URL: http://localhost:3001
      
      # Environment
      NODE_ENV: development
      PORT: 3001
      
      # Logging
      LOG_LEVEL: debug
      
      # Security
      BCRYPT_ROUNDS: 10
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/scripts:/app/scripts:ro
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: trading-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_APP_NAME: Trading Platform
      VITE_APP_VERSION: 1.0.0
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    networks:
      - trading-network
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0

  # =============================================================================
  # NGINX REVERSE PROXY (OPTIONAL)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

  # =============================================================================
  # ADMINER - DATABASE MANAGEMENT (DEVELOPMENT ONLY)
  # =============================================================================
  adminer:
    image: adminer:latest
    container_name: trading-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_NAME: trading_platform
    ports:
      - "8080:8080"
    networks:
      - trading-network
    depends_on:
      - postgres
    profiles:
      - development

  # =============================================================================
  # REDIS COMMANDER - REDIS MANAGEMENT (DEVELOPMENT ONLY)
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trading-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redis123"
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - trading-network
    depends_on:
      - redis
    profiles:
      - development

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    name: trading_postgres_data
  redis_data:
    name: trading_redis_data
  backend_uploads:
    name: trading_backend_uploads
  backend_logs:
    name: trading_backend_logs
  frontend_node_modules:
    name: trading_frontend_node_modules

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  trading-network:
    name: trading_network
    driver: bridge

# =============================================================================
# ADDITIONAL CONFIGURATIONS
# =============================================================================

# To run only core services (development):
# docker-compose --profile development up

# To run with production services:
# docker-compose --profile production up

# To run specific services:
# docker-compose up postgres redis backend
# docker-compose up frontend

# Useful commands:
# docker-compose up -d                    # Start all services in background
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop all services and remove volumes
# docker-compose logs backend             # View backend logs
# docker-compose exec backend sh          # Access backend container
# docker-compose exec postgres psql -U postgres -d trading_platform  # Access database